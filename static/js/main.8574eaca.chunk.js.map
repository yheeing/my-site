{"version":3,"sources":["pages/About.js","pages/Blog.js","pages/Project.js","App.js","theme.js","serviceWorker.js","index.js"],"names":["About","Blog","Project","StyledBreadcrumb","withStyles","theme","root","backgroundColor","palette","grey","height","spacing","color","fontWeight","typography","fontWeightRegular","boxShadow","shadows","emphasize","Chip","handleClick","App","Container","maxWidth","Breadcrumbs","aria-label","component","href","label","icon","fontSize","onClick","deleteIcon","onDelete","path","createMuiTheme","primary","main","secondary","error","red","A400","background","default","Boolean","window","location","hostname","match","ReactDOM","render","ThemeProvider","CssBaseline","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"iRAQiBA,MANjB,WACI,OACE,sCCIWC,MANjB,WACI,OACE,qCCIWC,MANjB,WACI,OACE,wC,eCiBAC,EAAmBC,aAAW,SAACC,GAAD,MAAY,CAC9CC,KAAM,CACJC,gBAAiBF,EAAMG,QAAQC,KAAK,KACpCC,OAAQL,EAAMM,QAAQ,GACtBC,MAAOP,EAAMG,QAAQC,KAAK,KAC1BI,WAAYR,EAAMS,WAAWC,kBAC7B,mBAAoB,CAClBR,gBAAiBF,EAAMG,QAAQC,KAAK,MAEtC,WAAY,CACVO,UAAWX,EAAMY,QAAQ,GACzBV,gBAAiBW,YAAUb,EAAMG,QAAQC,KAAK,KAAM,UAXjCL,CAcrBe,KA6CJ,SAASC,KAIMC,MA9Cf,WACE,OACE,6BACA,kBAACC,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,CAAaC,aAAW,cACtB,kBAACtB,EAAD,CACEuB,UAAU,IACVC,KAAK,uBACLC,MAAM,QACNC,KAAM,kBAAC,IAAD,CAAUC,SAAS,UACzBC,QAASX,IAEX,kBAACjB,EAAD,CAAkBuB,UAAU,IAAIC,KAAK,sBAAsBC,MAAM,SACjE,kBAACzB,EAAD,CACEwB,KAAK,yBACLC,MAAM,UACNI,WAAY,kBAAC,IAAD,MACZD,QAASX,EACTa,SAAUb,MAKhB,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOc,KAAK,wBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,uBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,0BACV,kBAAC,EAAD,Y,gBClDG7B,EAjBD8B,YAAe,CAC3B3B,QAAS,CACP4B,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,WAERE,MAAO,CACLF,KAAMG,IAAIC,MAEZC,WAAY,CACVC,QAAS,WCJKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAACC,EAAA,EAAD,CAAe9C,MAAOA,GAEpB,kBAAC+C,EAAA,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,cAAc,UDqHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtB,GACLuB,QAAQvB,MAAMA,EAAMwB,c","file":"static/js/main.8574eaca.chunk.js","sourcesContent":["import React from 'react';\n\nfunction About() {\n    return (\n      <h2>About</h2>\n    );\n  }\n  \n  export default About;\n  ","import React from 'react';\n\nfunction Blog() {\n    return (\n      <h2>Blog</h2>\n    );\n  }\n  \n  export default Blog;","import React from 'react';\n\nfunction Project() {\n    return (\n      <h2>Project</h2>\n    );\n  }\n  \n  export default Project;","import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport { emphasize, withStyles } from '@material-ui/core/styles';\nimport Chip from '@material-ui/core/Chip';\nimport HomeIcon from '@material-ui/icons/Home';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n// import Link from '@material-ui/core/Link';\n// import ProTip from './ProTip';\n\n// import { BrowserRouter, Route, Link } from \"react-router-dom\";\n\nimport About from './pages/About';\nimport Blog from './pages/Blog';\nimport Project from './pages/Project';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\n\nconst StyledBreadcrumb = withStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.grey[100],\n    height: theme.spacing(3),\n    color: theme.palette.grey[800],\n    fontWeight: theme.typography.fontWeightRegular,\n    '&:hover, &:focus': {\n      backgroundColor: theme.palette.grey[300],\n    },\n    '&:active': {\n      boxShadow: theme.shadows[1],\n      backgroundColor: emphasize(theme.palette.grey[300], 0.12),\n    },\n  },\n}))(Chip); // TypeScript only: need a type cast here because https://github.com/Microsoft/TypeScript/issues/26591\n\n\nfunction App() {\n  return (\n    <div>\n    <Container maxWidth=\"sm\">\n      <Breadcrumbs aria-label=\"breadcrumb\">\n        <StyledBreadcrumb\n          component=\"a\"\n          href=\"/my-site/pages/About\"\n          label=\"About\"\n          icon={<HomeIcon fontSize=\"small\" />}\n          onClick={handleClick}\n        />\n        <StyledBreadcrumb component=\"a\" href=\"/my-site/pages/Blog\" label=\"Blog\" /*onClick={handleClick} TODO: */ />\n        <StyledBreadcrumb\n          href=\"/my-site/pages/Project\"\n          label=\"Project\"\n          deleteIcon={<ExpandMoreIcon />}\n          onClick={handleClick}\n          onDelete={handleClick}\n        />\n      </Breadcrumbs>\n    </Container>\n\n    <Router>\n      <div>\n        <Switch>\n          <Route path=\"/my-site/pages/about\">\n            <About />\n          </Route>\n          <Route path=\"/my-site/pages/blog\">\n            <Blog />\n          </Route>\n          <Route path=\"/my-site/pages/project\">\n            <Project />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n    </div>\n  );\n}\n\nfunction handleClick() {\n\n}\n\nexport default App;\n","import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n});\n\nexport default theme;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport App from './App';\nimport theme from './theme';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.querySelector('#root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}